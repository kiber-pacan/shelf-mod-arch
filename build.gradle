plugins {
    id 'dev.architectury.loom' version '1.7-SNAPSHOT' apply false

    id 'architectury-plugin' version '3.4-SNAPSHOT'

    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false

    id 'systems.manifold.manifold-gradle-plugin' version '0.0.2-alpha'
}

project.gradle.ext.getProperties().each { prop ->
    rootProject.ext.set(prop.key, prop.value)
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'
    apply plugin: "systems.manifold.manifold-gradle-plugin"

    base {
        archivesName = "$rootProject.archives_name-mc$project.minecraft_version-$project.name"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    configurations {
        testImplementation.extendsFrom annotationProcessor
    }


    processResources {
        def replaceProperties = [
                version : project.mod_version,
                minecraft_version : project.minecraft_version,
                java : "17",
                name : "Shelf mod",
                description : "Simple mod that adds shelves to minecraft",
                architectury_api_version : project.architectury_api_version
        ]

        def files = ["fabric.mod.json", "META-INF/mods.toml", "META-INF/neoforge.mods.toml", "quilt.mod.json"]
        inputs.properties replaceProperties

        filesMatching(files) {
            replaceProperties.eachWithIndex {
                expand(replaceProperties) {
                    replaceProperties
                }
            }
        }
    }

    dependencies {
        annotationProcessor("systems.manifold:manifold-preprocessor:${manifold_version}")
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        if (rootProject.hasProperty("yarn_mappings_patch_neoforge_version")) {
            mappings loom.layered {
                it.mappings("net.fabricmc:yarn:$rootProject.yarn_mappings:v2")
                it.mappings("dev.architectury:yarn-mappings-patch-neoforge:$rootProject.yarn_mappings_patch_neoforge_version")
            }
        } else {
            mappings "net.fabricmc:yarn:$rootProject.yarn_mappings:v2"
        }
    }


    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }
}
